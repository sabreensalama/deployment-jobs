# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          name: destroy environment
          when: on_fail
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:5}
            aws cloudformation delete-stack \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  create_infstructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
  
  update_inventory_with_ec2_ips:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: update inventory.txt with ec2s ips
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress'\
              --filters "Name=tag:Project,Values=udacity" \
              --output text >> inventory.txt \
              --region us-east-1
            cat inventory.txt
      - save_cache:
          key: inventory-key-${CIRCLE_SHA1}
          paths:
            - inventory.txt

  configure_infstruceture:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["44:15:3d:14:fb:2a:01:30:79:7e:39:35:97:8a:4e:90"]
      - run:
          name: "install ansible"
          command: |
            apk add --update ansible
            ansible --version
            mkdir ~/.ansible/cp
            ls ~/.ansible
      - restore_cache:
          keys:
            - inventory-key-${CIRCLE_SHA1}
      - run:
          name: Run Playbook and Configure server
          command: |
            cat inventory.txt
            ansible-playbook -i inventory.txt main-remote.yml

  smoke_test:
    docker:
      # - image: alpine:latest
      - image: amazon/aws-cli
    steps:
      # - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog2.udacity.com/"
            if curl -s --head ${URL}
            then
              exit 0
            else
              exit 1
            fi
      - destroy_environment
  
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Excute bucket.yml to create cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: copy files to Bucket
          command: |
            aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
            ls

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name cloud-dist-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack.
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  my-workflow:
    jobs:
      - create_infstructure
      - update_inventory_with_ec2_ips:
          requires:
            - "create_infstructure"
      - configure_infstruceture:
          requires:
            - "update_inventory_with_ec2_ips"
      - smoke_test:
          requires:
            - "configure_infstruceture"
#       - create_and_deploy_front_end
#       - promote_to_production:
#           requires: 
#             - create_and_deploy_front_end
#       - get_last_deployment_id
#       - clean_up_old_front_end:
#           requires:
#             - get_last_deployment_id
#             - promote_to_production
